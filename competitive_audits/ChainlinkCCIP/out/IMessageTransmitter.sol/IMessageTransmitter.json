{"abi":[{"type":"function","name":"localDomain","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"receiveMessage","inputs":[{"name":"message","type":"bytes","internalType":"bytes"},{"name":"attestation","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"version","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"localDomain()":"8d3638f4","receiveMessage(bytes,bytes)":"57ecfd28","version()":"54fd4d50"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"localDomain()\":{\"details\":\"immutable\"},\"receiveMessage(bytes,bytes)\":{\"params\":{\"message\":\"The original message on the source chain     * Message format:     * Field                 Bytes      Type       Index     * version               4          uint32     0     * sourceDomain          4          uint32     4     * destinationDomain     4          uint32     8     * nonce                 8          uint64     12     * sender                32         bytes32    20     * recipient             32         bytes32    52     * destinationCaller     32         bytes32    84     * messageBody           dynamic    bytes      116 param attestation A valid attestation is the concatenated 65-byte signature(s) of exactly `thresholdSignature` signatures, in increasing order of attester address. ***If the attester addresses recovered from signatures are not in increasing order, signature verification will fail.*** If incorrect number of signatures or duplicate signatures are supplied, signature verification will fail.\"}},\"version()\":{\"details\":\"immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"localDomain()\":{\"notice\":\"Returns domain of chain on which the contract is deployed.\"},\"receiveMessage(bytes,bytes)\":{\"notice\":\"Unlocks USDC tokens on the destination chain\"},\"version()\":{\"notice\":\"Returns message format version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ccip/pools/USDC/IMessageTransmitter.sol\":\"IMessageTransmitter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":forge-std/=foundry-lib/forge-std/src/\"]},\"sources\":{\"ccip/pools/USDC/IMessageTransmitter.sol\":{\"keccak256\":\"0x3a247a80166d413ecfec0ab0121325a19560ee9d92324045a256cebad733a1e6\",\"urls\":[\"bzz-raw://bdc297926a6a25d339ecb49a6ebbce2057a321adf6107f55a09782a09fe6f38f\",\"dweb:/ipfs/QmRWhUBPpxosBDeCgaRQeeM8ZLg7eaW9aJc3gF9fyUTyHT\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"attestation","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"receiveMessage","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"version","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]}],"devdoc":{"kind":"dev","methods":{"localDomain()":{"details":"immutable"},"receiveMessage(bytes,bytes)":{"params":{"message":"The original message on the source chain     * Message format:     * Field                 Bytes      Type       Index     * version               4          uint32     0     * sourceDomain          4          uint32     4     * destinationDomain     4          uint32     8     * nonce                 8          uint64     12     * sender                32         bytes32    20     * recipient             32         bytes32    52     * destinationCaller     32         bytes32    84     * messageBody           dynamic    bytes      116 param attestation A valid attestation is the concatenated 65-byte signature(s) of exactly `thresholdSignature` signatures, in increasing order of attester address. ***If the attester addresses recovered from signatures are not in increasing order, signature verification will fail.*** If incorrect number of signatures or duplicate signatures are supplied, signature verification will fail."}},"version()":{"details":"immutable"}},"version":1},"userdoc":{"kind":"user","methods":{"localDomain()":{"notice":"Returns domain of chain on which the contract is deployed."},"receiveMessage(bytes,bytes)":{"notice":"Unlocks USDC tokens on the destination chain"},"version()":{"notice":"Returns message format version."}},"version":1}},"settings":{"remappings":["forge-std/=foundry-lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"ccip/pools/USDC/IMessageTransmitter.sol":"IMessageTransmitter"},"evmVersion":"paris","libraries":{}},"sources":{"ccip/pools/USDC/IMessageTransmitter.sol":{"keccak256":"0x3a247a80166d413ecfec0ab0121325a19560ee9d92324045a256cebad733a1e6","urls":["bzz-raw://bdc297926a6a25d339ecb49a6ebbce2057a321adf6107f55a09782a09fe6f38f","dweb:/ipfs/QmRWhUBPpxosBDeCgaRQeeM8ZLg7eaW9aJc3gF9fyUTyHT"],"license":null}},"version":1},"ast":{"absolutePath":"ccip/pools/USDC/IMessageTransmitter.sol","id":17082,"exportedSymbols":{"IMessageTransmitter":[17081]},"nodeType":"SourceUnit","src":"619:1535:49","nodes":[{"id":17058,"nodeType":"PragmaDirective","src":"619:23:49","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":17081,"nodeType":"ContractDefinition","src":"644:1509:49","nodes":[{"id":17068,"nodeType":"FunctionDefinition","src":"1786:108:49","nodes":[],"documentation":{"id":17059,"nodeType":"StructuredDocumentation","src":"678:1105:49","text":"@notice Unlocks USDC tokens on the destination chain\n @param message The original message on the source chain\n     * Message format:\n     * Field                 Bytes      Type       Index\n     * version               4          uint32     0\n     * sourceDomain          4          uint32     4\n     * destinationDomain     4          uint32     8\n     * nonce                 8          uint64     12\n     * sender                32         bytes32    20\n     * recipient             32         bytes32    52\n     * destinationCaller     32         bytes32    84\n     * messageBody           dynamic    bytes      116\n param attestation A valid attestation is the concatenated 65-byte signature(s) of\n exactly `thresholdSignature` signatures, in increasing order of attester address.\n ***If the attester addresses recovered from signatures are not in increasing order,\n signature verification will fail.***\n If incorrect number of signatures or duplicate signatures are supplied,\n signature verification will fail."},"functionSelector":"57ecfd28","implemented":false,"kind":"function","modifiers":[],"name":"receiveMessage","nameLocation":"1795:14:49","parameters":{"id":17064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17061,"mutability":"mutable","name":"message","nameLocation":"1825:7:49","nodeType":"VariableDeclaration","scope":17068,"src":"1810:22:49","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":17060,"name":"bytes","nodeType":"ElementaryTypeName","src":"1810:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":17063,"mutability":"mutable","name":"attestation","nameLocation":"1849:11:49","nodeType":"VariableDeclaration","scope":17068,"src":"1834:26:49","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":17062,"name":"bytes","nodeType":"ElementaryTypeName","src":"1834:5:49","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1809:52:49"},"returnParameters":{"id":17067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17066,"mutability":"mutable","name":"success","nameLocation":"1885:7:49","nodeType":"VariableDeclaration","scope":17068,"src":"1880:12:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":17065,"name":"bool","nodeType":"ElementaryTypeName","src":"1880:4:49","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1879:14:49"},"scope":17081,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":17074,"nodeType":"FunctionDefinition","src":"1984:54:49","nodes":[],"documentation":{"id":17069,"nodeType":"StructuredDocumentation","src":"1898:83:49","text":"Returns domain of chain on which the contract is deployed.\n @dev immutable"},"functionSelector":"8d3638f4","implemented":false,"kind":"function","modifiers":[],"name":"localDomain","nameLocation":"1993:11:49","parameters":{"id":17070,"nodeType":"ParameterList","parameters":[],"src":"2004:2:49"},"returnParameters":{"id":17073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17072,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":17074,"src":"2030:6:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":17071,"name":"uint32","nodeType":"ElementaryTypeName","src":"2030:6:49","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2029:8:49"},"scope":17081,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":17080,"nodeType":"FunctionDefinition","src":"2101:50:49","nodes":[],"documentation":{"id":17075,"nodeType":"StructuredDocumentation","src":"2042:56:49","text":"Returns message format version.\n @dev immutable"},"functionSelector":"54fd4d50","implemented":false,"kind":"function","modifiers":[],"name":"version","nameLocation":"2110:7:49","parameters":{"id":17076,"nodeType":"ParameterList","parameters":[],"src":"2117:2:49"},"returnParameters":{"id":17079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":17078,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":17080,"src":"2143:6:49","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":17077,"name":"uint32","nodeType":"ElementaryTypeName","src":"2143:6:49","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2142:8:49"},"scope":17081,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IMessageTransmitter","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[17081],"name":"IMessageTransmitter","nameLocation":"654:19:49","scope":17082,"usedErrors":[],"usedEvents":[]}]},"id":49}