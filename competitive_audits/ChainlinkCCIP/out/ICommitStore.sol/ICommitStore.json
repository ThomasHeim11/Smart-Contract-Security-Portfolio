{"abi":[{"type":"function","name":"getExpectedNextSequenceNumber","inputs":[],"outputs":[{"name":"sequenceNumber","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"verify","inputs":[{"name":"hashedLeaves","type":"bytes32[]","internalType":"bytes32[]"},{"name":"proofs","type":"bytes32[]","internalType":"bytes32[]"},{"name":"proofFlagBits","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"timestamp","type":"uint256","internalType":"uint256"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getExpectedNextSequenceNumber()":"4120fccd","verify(bytes32[],bytes32[],uint256)":"32048875"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"sequenceNumber\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"hashedLeaves\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"proofs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofFlagBits\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verify(bytes32[],bytes32[],uint256)\":{\"details\":\"This method uses a merkle tree within a merkle tree, with the hashedLeaves, proofs and proofFlagBits being used to get the root of the inner tree. This root is then used as the singular leaf of the outer tree.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExpectedNextSequenceNumber()\":{\"notice\":\"Returns the expected next sequence number\"},\"verify(bytes32[],bytes32[],uint256)\":{\"notice\":\"Returns timestamp of when root was accepted or 0 if verification fails.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ccip/interfaces/ICommitStore.sol\":\"ICommitStore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":forge-std/=foundry-lib/forge-std/src/\"]},\"sources\":{\"ccip/interfaces/ICommitStore.sol\":{\"keccak256\":\"0x07eefec62840b0cbb72d2c3ae0db5185e7be3bf18a4e46c7321092df4582ca4b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b9a4fa46de25eef979b73256c125160fed84bef208501de933a45c83b5f7b60c\",\"dweb:/ipfs/QmdBwDXe9Ra2BB2JAaNwVN6YqTJPziffah2RkEtc2ZkhWS\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"getExpectedNextSequenceNumber","outputs":[{"internalType":"uint64","name":"sequenceNumber","type":"uint64"}]},{"inputs":[{"internalType":"bytes32[]","name":"hashedLeaves","type":"bytes32[]"},{"internalType":"bytes32[]","name":"proofs","type":"bytes32[]"},{"internalType":"uint256","name":"proofFlagBits","type":"uint256"}],"stateMutability":"view","type":"function","name":"verify","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}]}],"devdoc":{"kind":"dev","methods":{"verify(bytes32[],bytes32[],uint256)":{"details":"This method uses a merkle tree within a merkle tree, with the hashedLeaves, proofs and proofFlagBits being used to get the root of the inner tree. This root is then used as the singular leaf of the outer tree."}},"version":1},"userdoc":{"kind":"user","methods":{"getExpectedNextSequenceNumber()":{"notice":"Returns the expected next sequence number"},"verify(bytes32[],bytes32[],uint256)":{"notice":"Returns timestamp of when root was accepted or 0 if verification fails."}},"version":1}},"settings":{"remappings":["forge-std/=foundry-lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"ccip/interfaces/ICommitStore.sol":"ICommitStore"},"evmVersion":"paris","libraries":{}},"sources":{"ccip/interfaces/ICommitStore.sol":{"keccak256":"0x07eefec62840b0cbb72d2c3ae0db5185e7be3bf18a4e46c7321092df4582ca4b","urls":["bzz-raw://b9a4fa46de25eef979b73256c125160fed84bef208501de933a45c83b5f7b60c","dweb:/ipfs/QmdBwDXe9Ra2BB2JAaNwVN6YqTJPziffah2RkEtc2ZkhWS"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"ccip/interfaces/ICommitStore.sol","id":7290,"exportedSymbols":{"ICommitStore":[7289]},"nodeType":"SourceUnit","src":"32:678:15","nodes":[{"id":7268,"nodeType":"PragmaDirective","src":"32:23:15","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":7289,"nodeType":"ContractDefinition","src":"57:652:15","nodes":[{"id":7282,"nodeType":"FunctionDefinition","src":"403:157:15","nodes":[],"documentation":{"id":7269,"nodeType":"StructuredDocumentation","src":"84:316:15","text":"@notice Returns timestamp of when root was accepted or 0 if verification fails.\n @dev This method uses a merkle tree within a merkle tree, with the hashedLeaves,\n proofs and proofFlagBits being used to get the root of the inner tree.\n This root is then used as the singular leaf of the outer tree."},"functionSelector":"32048875","implemented":false,"kind":"function","modifiers":[],"name":"verify","nameLocation":"412:6:15","parameters":{"id":7278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7272,"mutability":"mutable","name":"hashedLeaves","nameLocation":"443:12:15","nodeType":"VariableDeclaration","scope":7282,"src":"424:31:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"424:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7271,"nodeType":"ArrayTypeName","src":"424:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":7275,"mutability":"mutable","name":"proofs","nameLocation":"480:6:15","nodeType":"VariableDeclaration","scope":7282,"src":"461:25:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":7273,"name":"bytes32","nodeType":"ElementaryTypeName","src":"461:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":7274,"nodeType":"ArrayTypeName","src":"461:9:15","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":7277,"mutability":"mutable","name":"proofFlagBits","nameLocation":"500:13:15","nodeType":"VariableDeclaration","scope":7282,"src":"492:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7276,"name":"uint256","nodeType":"ElementaryTypeName","src":"492:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"418:99:15"},"returnParameters":{"id":7281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7280,"mutability":"mutable","name":"timestamp","nameLocation":"549:9:15","nodeType":"VariableDeclaration","scope":7282,"src":"541:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7279,"name":"uint256","nodeType":"ElementaryTypeName","src":"541:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"540:19:15"},"scope":7289,"stateMutability":"view","virtual":false,"visibility":"external"},{"id":7288,"nodeType":"FunctionDefinition","src":"620:87:15","nodes":[],"documentation":{"id":7283,"nodeType":"StructuredDocumentation","src":"564:53:15","text":"@notice Returns the expected next sequence number"},"functionSelector":"4120fccd","implemented":false,"kind":"function","modifiers":[],"name":"getExpectedNextSequenceNumber","nameLocation":"629:29:15","parameters":{"id":7284,"nodeType":"ParameterList","parameters":[],"src":"658:2:15"},"returnParameters":{"id":7287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7286,"mutability":"mutable","name":"sequenceNumber","nameLocation":"691:14:15","nodeType":"VariableDeclaration","scope":7288,"src":"684:21:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":7285,"name":"uint64","nodeType":"ElementaryTypeName","src":"684:6:15","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"683:23:15"},"scope":7289,"stateMutability":"view","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"ICommitStore","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[7289],"name":"ICommitStore","nameLocation":"67:12:15","scope":7290,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":15}