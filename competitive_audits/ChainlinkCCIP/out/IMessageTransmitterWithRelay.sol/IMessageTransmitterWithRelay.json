{"abi":[{"type":"function","name":"localDomain","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"},{"type":"function","name":"receiveMessage","inputs":[{"name":"message","type":"bytes","internalType":"bytes"},{"name":"attestation","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"}],"stateMutability":"nonpayable"},{"type":"function","name":"sendMessage","inputs":[{"name":"destinationDomain","type":"uint32","internalType":"uint32"},{"name":"recipient","type":"bytes32","internalType":"bytes32"},{"name":"messageBody","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"nonpayable"},{"type":"function","name":"sendMessageWithCaller","inputs":[{"name":"destinationDomain","type":"uint32","internalType":"uint32"},{"name":"recipient","type":"bytes32","internalType":"bytes32"},{"name":"destinationCaller","type":"bytes32","internalType":"bytes32"},{"name":"messageBody","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"nonpayable"},{"type":"function","name":"version","inputs":[],"outputs":[{"name":"","type":"uint32","internalType":"uint32"}],"stateMutability":"view"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"localDomain()":"8d3638f4","receiveMessage(bytes,bytes)":"57ecfd28","sendMessage(uint32,bytes32,bytes)":"0ba469bc","sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":"f7259a75","version()":"54fd4d50"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCaller\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"messageBody\",\"type\":\"bytes\"}],\"name\":\"sendMessageWithCaller\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"localDomain()\":{\"details\":\"immutable\"},\"receiveMessage(bytes,bytes)\":{\"params\":{\"message\":\"The original message on the source chain     * Message format:     * Field                 Bytes      Type       Index     * version               4          uint32     0     * sourceDomain          4          uint32     4     * destinationDomain     4          uint32     8     * nonce                 8          uint64     12     * sender                32         bytes32    20     * recipient             32         bytes32    52     * destinationCaller     32         bytes32    84     * messageBody           dynamic    bytes      116 param attestation A valid attestation is the concatenated 65-byte signature(s) of exactly `thresholdSignature` signatures, in increasing order of attester address. ***If the attester addresses recovered from signatures are not in increasing order, signature verification will fail.*** If incorrect number of signatures or duplicate signatures are supplied, signature verification will fail.\"}},\"sendMessage(uint32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information.\",\"params\":{\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"details\":\"Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.\",\"params\":{\"destinationCaller\":\"caller on the destination domain, as bytes32\",\"destinationDomain\":\"Domain of destination chain\",\"messageBody\":\"Raw bytes content of message\",\"recipient\":\"Address of message recipient on destination domain as bytes32\"},\"returns\":{\"_0\":\"nonce reserved by message\"}},\"version()\":{\"details\":\"immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"localDomain()\":{\"notice\":\"Returns domain of chain on which the contract is deployed.\"},\"receiveMessage(bytes,bytes)\":{\"notice\":\"Unlocks USDC tokens on the destination chain\"},\"sendMessage(uint32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain.\"},\"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)\":{\"notice\":\"Sends an outgoing message from the source domain, with a specified caller on the destination domain.\"},\"version()\":{\"notice\":\"Returns message format version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ccip/test/mocks/interfaces/IMessageTransmitterWithRelay.sol\":\"IMessageTransmitterWithRelay\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":forge-std/=foundry-lib/forge-std/src/\"]},\"sources\":{\"ccip/pools/USDC/IMessageTransmitter.sol\":{\"keccak256\":\"0x3a247a80166d413ecfec0ab0121325a19560ee9d92324045a256cebad733a1e6\",\"urls\":[\"bzz-raw://bdc297926a6a25d339ecb49a6ebbce2057a321adf6107f55a09782a09fe6f38f\",\"dweb:/ipfs/QmRWhUBPpxosBDeCgaRQeeM8ZLg7eaW9aJc3gF9fyUTyHT\"]},\"ccip/test/mocks/interfaces/IMessageTransmitterWithRelay.sol\":{\"keccak256\":\"0x0f62e29819bc5cff905d0b81a745a6f2dc6791250e43c4d2afc314f89253d94f\",\"urls\":[\"bzz-raw://404195344c45816e841a340ec1d0dddedd93551891da691f48f201ed54a511cd\",\"dweb:/ipfs/QmSXHHmQFtzWdKbzD3zyNjKS8jnRBW3unJ1t3Cva66gEig\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"view","type":"function","name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"bytes","name":"attestation","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"receiveMessage","outputs":[{"internalType":"bool","name":"success","type":"bool"}]},{"inputs":[{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"bytes32","name":"recipient","type":"bytes32"},{"internalType":"bytes","name":"messageBody","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"sendMessage","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]},{"inputs":[{"internalType":"uint32","name":"destinationDomain","type":"uint32"},{"internalType":"bytes32","name":"recipient","type":"bytes32"},{"internalType":"bytes32","name":"destinationCaller","type":"bytes32"},{"internalType":"bytes","name":"messageBody","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"sendMessageWithCaller","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"version","outputs":[{"internalType":"uint32","name":"","type":"uint32"}]}],"devdoc":{"kind":"dev","methods":{"localDomain()":{"details":"immutable"},"receiveMessage(bytes,bytes)":{"params":{"message":"The original message on the source chain     * Message format:     * Field                 Bytes      Type       Index     * version               4          uint32     0     * sourceDomain          4          uint32     4     * destinationDomain     4          uint32     8     * nonce                 8          uint64     12     * sender                32         bytes32    20     * recipient             32         bytes32    52     * destinationCaller     32         bytes32    84     * messageBody           dynamic    bytes      116 param attestation A valid attestation is the concatenated 65-byte signature(s) of exactly `thresholdSignature` signatures, in increasing order of attester address. ***If the attester addresses recovered from signatures are not in increasing order, signature verification will fail.*** If incorrect number of signatures or duplicate signatures are supplied, signature verification will fail."}},"sendMessage(uint32,bytes32,bytes)":{"details":"Increment nonce, format the message, and emit `MessageSent` event with message information.","params":{"destinationDomain":"Domain of destination chain","messageBody":"Raw bytes content of message","recipient":"Address of message recipient on destination domain as bytes32"},"returns":{"_0":"nonce reserved by message"}},"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":{"details":"Increment nonce, format the message, and emit `MessageSent` event with message information. WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible to broadcast the message on the destination domain. This is an advanced feature, and the standard sendMessage() should be preferred for use cases where a specific destination caller is not required.","params":{"destinationCaller":"caller on the destination domain, as bytes32","destinationDomain":"Domain of destination chain","messageBody":"Raw bytes content of message","recipient":"Address of message recipient on destination domain as bytes32"},"returns":{"_0":"nonce reserved by message"}},"version()":{"details":"immutable"}},"version":1},"userdoc":{"kind":"user","methods":{"localDomain()":{"notice":"Returns domain of chain on which the contract is deployed."},"receiveMessage(bytes,bytes)":{"notice":"Unlocks USDC tokens on the destination chain"},"sendMessage(uint32,bytes32,bytes)":{"notice":"Sends an outgoing message from the source domain."},"sendMessageWithCaller(uint32,bytes32,bytes32,bytes)":{"notice":"Sends an outgoing message from the source domain, with a specified caller on the destination domain."},"version()":{"notice":"Returns message format version."}},"version":1}},"settings":{"remappings":["forge-std/=foundry-lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"ccip/test/mocks/interfaces/IMessageTransmitterWithRelay.sol":"IMessageTransmitterWithRelay"},"evmVersion":"paris","libraries":{}},"sources":{"ccip/pools/USDC/IMessageTransmitter.sol":{"keccak256":"0x3a247a80166d413ecfec0ab0121325a19560ee9d92324045a256cebad733a1e6","urls":["bzz-raw://bdc297926a6a25d339ecb49a6ebbce2057a321adf6107f55a09782a09fe6f38f","dweb:/ipfs/QmRWhUBPpxosBDeCgaRQeeM8ZLg7eaW9aJc3gF9fyUTyHT"],"license":null},"ccip/test/mocks/interfaces/IMessageTransmitterWithRelay.sol":{"keccak256":"0x0f62e29819bc5cff905d0b81a745a6f2dc6791250e43c4d2afc314f89253d94f","urls":["bzz-raw://404195344c45816e841a340ec1d0dddedd93551891da691f48f201ed54a511cd","dweb:/ipfs/QmSXHHmQFtzWdKbzD3zyNjKS8jnRBW3unJ1t3Cva66gEig"],"license":null}},"version":1},"ast":{"absolutePath":"ccip/test/mocks/interfaces/IMessageTransmitterWithRelay.sol","id":46941,"exportedSymbols":{"IMessageTransmitter":[17081],"IMessageTransmitterWithRelay":[46940]},"nodeType":"SourceUnit","src":"619:1887:112","nodes":[{"id":46909,"nodeType":"PragmaDirective","src":"619:23:112","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":46911,"nodeType":"ImportDirective","src":"644:80:112","nodes":[],"absolutePath":"ccip/pools/USDC/IMessageTransmitter.sol","file":"../../../pools/USDC/IMessageTransmitter.sol","nameLocation":"-1:-1:-1","scope":46941,"sourceUnit":17082,"symbolAliases":[{"foreign":{"id":46910,"name":"IMessageTransmitter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":17081,"src":"652:19:112","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":46940,"nodeType":"ContractDefinition","src":"841:1664:112","nodes":[{"id":46925,"nodeType":"FunctionDefinition","src":"1318:136:112","nodes":[],"documentation":{"id":46914,"nodeType":"StructuredDocumentation","src":"907:408:112","text":" @notice Sends an outgoing message from the source domain.\n @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n @param destinationDomain Domain of destination chain\n @param recipient Address of message recipient on destination domain as bytes32\n @param messageBody Raw bytes content of message\n @return nonce reserved by message"},"functionSelector":"0ba469bc","implemented":false,"kind":"function","modifiers":[],"name":"sendMessage","nameLocation":"1327:11:112","parameters":{"id":46921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":46916,"mutability":"mutable","name":"destinationDomain","nameLocation":"1351:17:112","nodeType":"VariableDeclaration","scope":46925,"src":"1344:24:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":46915,"name":"uint32","nodeType":"ElementaryTypeName","src":"1344:6:112","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":46918,"mutability":"mutable","name":"recipient","nameLocation":"1382:9:112","nodeType":"VariableDeclaration","scope":46925,"src":"1374:17:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":46917,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1374:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":46920,"mutability":"mutable","name":"messageBody","nameLocation":"1412:11:112","nodeType":"VariableDeclaration","scope":46925,"src":"1397:26:112","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":46919,"name":"bytes","nodeType":"ElementaryTypeName","src":"1397:5:112","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1338:89:112"},"returnParameters":{"id":46924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":46923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":46925,"src":"1446:6:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":46922,"name":"uint64","nodeType":"ElementaryTypeName","src":"1446:6:112","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"1445:8:112"},"scope":46940,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":46939,"nodeType":"FunctionDefinition","src":"2326:177:112","nodes":[],"documentation":{"id":46926,"nodeType":"StructuredDocumentation","src":"1458:865:112","text":" @notice Sends an outgoing message from the source domain, with a specified caller on the\n destination domain.\n @dev Increment nonce, format the message, and emit `MessageSent` event with message information.\n WARNING: if the `destinationCaller` does not represent a valid address as bytes32, then it will not be possible\n to broadcast the message on the destination domain. This is an advanced feature, and the standard\n sendMessage() should be preferred for use cases where a specific destination caller is not required.\n @param destinationDomain Domain of destination chain\n @param recipient Address of message recipient on destination domain as bytes32\n @param destinationCaller caller on the destination domain, as bytes32\n @param messageBody Raw bytes content of message\n @return nonce reserved by message"},"functionSelector":"f7259a75","implemented":false,"kind":"function","modifiers":[],"name":"sendMessageWithCaller","nameLocation":"2335:21:112","parameters":{"id":46935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":46928,"mutability":"mutable","name":"destinationDomain","nameLocation":"2369:17:112","nodeType":"VariableDeclaration","scope":46939,"src":"2362:24:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":46927,"name":"uint32","nodeType":"ElementaryTypeName","src":"2362:6:112","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":46930,"mutability":"mutable","name":"recipient","nameLocation":"2400:9:112","nodeType":"VariableDeclaration","scope":46939,"src":"2392:17:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":46929,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2392:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":46932,"mutability":"mutable","name":"destinationCaller","nameLocation":"2423:17:112","nodeType":"VariableDeclaration","scope":46939,"src":"2415:25:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":46931,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2415:7:112","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":46934,"mutability":"mutable","name":"messageBody","nameLocation":"2461:11:112","nodeType":"VariableDeclaration","scope":46939,"src":"2446:26:112","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":46933,"name":"bytes","nodeType":"ElementaryTypeName","src":"2446:5:112","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2356:120:112"},"returnParameters":{"id":46938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":46937,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":46939,"src":"2495:6:112","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":46936,"name":"uint64","nodeType":"ElementaryTypeName","src":"2495:6:112","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2494:8:112"},"scope":46940,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[{"baseName":{"id":46912,"name":"IMessageTransmitter","nameLocations":["883:19:112"],"nodeType":"IdentifierPath","referencedDeclaration":17081,"src":"883:19:112"},"id":46913,"nodeType":"InheritanceSpecifier","src":"883:19:112"}],"canonicalName":"IMessageTransmitterWithRelay","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"linearizedBaseContracts":[46940,17081],"name":"IMessageTransmitterWithRelay","nameLocation":"851:28:112","scope":46941,"usedErrors":[],"usedEvents":[]}]},"id":112}