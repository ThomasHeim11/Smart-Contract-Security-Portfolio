{"abi":[{"type":"function","name":"ccipReceive","inputs":[{"name":"message","type":"tuple","internalType":"struct Client.Any2EVMMessage","components":[{"name":"messageId","type":"bytes32","internalType":"bytes32"},{"name":"sourceChainSelector","type":"uint64","internalType":"uint64"},{"name":"sender","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"destTokenAmounts","type":"tuple[]","internalType":"struct Client.EVMTokenAmount[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getRouter","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"error","name":"InvalidRouter","inputs":[{"name":"router","type":"address","internalType":"address"}]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":"85572ffb","getRouter()":"b0f479a1","supportsInterface(bytes4)":"01ffc9a7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getRouter()\":{\"returns\":{\"_0\":\"CCIP router address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\",\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}}},\"title\":\"CCIPReceiver - Base contract for CCIP applications that can receive messages.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ccip/applications/CCIPReceiver.sol\":\"CCIPReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":forge-std/=foundry-lib/forge-std/src/\"]},\"sources\":{\"ccip/applications/CCIPReceiver.sol\":{\"keccak256\":\"0x547af97ff4274205ba7b79ccf9f1042ce35f0bb8ae6416d4f9dae2363bdfb6be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a31205567017596e41af5628ffa7674b7989e302dd0dfd169ee4ab5ad0d3e6ff\",\"dweb:/ipfs/QmZTeGYQMZjUiBrufLGkS2p4k4ihC4LLegPVqHeCFxnvn8\"]},\"ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"keccak256\":\"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3bb4ca50612b0150a29b9ea7c82f6228914ff54716584541bad5c0259e8fa33\",\"dweb:/ipfs/QmTnqhNtBD9bUmqVaR4YHkWrBUdSGHV3DXAgrTM193PGkH\"]},\"ccip/libraries/Client.sol\":{\"keccak256\":\"0x343b4b6e91abb0194f61d5323b5ea6662a170dcfb6d77cb3b7568d061f668e0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://96ab8e106876ac873643499521cdf11b94d827f2646966a2a68d250dc3e25d44\",\"dweb:/ipfs/QmYiJKdbiSGgJ5PeZPs8b3fAoSfDPWTREUYXqtDJN4x4RF\"]},\"vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f235b9175d95111f301d729566e214c32559e55a2b0579c947484748e20679d\",\"dweb:/ipfs/QmSsNBuPejy1wNe2u3JSt2p9wFhrjvBjFrnAaNe1nDNkEA\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"router","type":"address"}],"type":"error","name":"InvalidRouter"},{"inputs":[{"internalType":"struct Client.Any2EVMMessage","name":"message","type":"tuple","components":[{"internalType":"bytes32","name":"messageId","type":"bytes32"},{"internalType":"uint64","name":"sourceChainSelector","type":"uint64"},{"internalType":"bytes","name":"sender","type":"bytes"},{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"struct Client.EVMTokenAmount[]","name":"destTokenAmounts","type":"tuple[]","components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}]}]}],"stateMutability":"nonpayable","type":"function","name":"ccipReceive"},{"inputs":[],"stateMutability":"view","type":"function","name":"getRouter","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"stateMutability":"view","type":"function","name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"details":"Note ensure you check the msg.sender is the OffRampRouter","params":{"message":"CCIP Message"}},"getRouter()":{"returns":{"_0":"CCIP router address"}},"supportsInterface(bytes4)":{"details":"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.","params":{"interfaceId":"The interfaceId to check"},"returns":{"_0":"true if the interfaceId is supported"}}},"version":1},"userdoc":{"kind":"user","methods":{"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))":{"notice":"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."},"getRouter()":{"notice":"Return the current router"},"supportsInterface(bytes4)":{"notice":"IERC165 supports an interfaceId"}},"version":1}},"settings":{"remappings":["forge-std/=foundry-lib/forge-std/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"ccip/applications/CCIPReceiver.sol":"CCIPReceiver"},"evmVersion":"paris","libraries":{}},"sources":{"ccip/applications/CCIPReceiver.sol":{"keccak256":"0x547af97ff4274205ba7b79ccf9f1042ce35f0bb8ae6416d4f9dae2363bdfb6be","urls":["bzz-raw://a31205567017596e41af5628ffa7674b7989e302dd0dfd169ee4ab5ad0d3e6ff","dweb:/ipfs/QmZTeGYQMZjUiBrufLGkS2p4k4ihC4LLegPVqHeCFxnvn8"],"license":"MIT"},"ccip/interfaces/IAny2EVMMessageReceiver.sol":{"keccak256":"0xd2a05a4f58a453cbf8cfa6aa78f58cb8e42091b3a025f711a0aa51f584e16b48","urls":["bzz-raw://e3bb4ca50612b0150a29b9ea7c82f6228914ff54716584541bad5c0259e8fa33","dweb:/ipfs/QmTnqhNtBD9bUmqVaR4YHkWrBUdSGHV3DXAgrTM193PGkH"],"license":"MIT"},"ccip/libraries/Client.sol":{"keccak256":"0x343b4b6e91abb0194f61d5323b5ea6662a170dcfb6d77cb3b7568d061f668e0b","urls":["bzz-raw://96ab8e106876ac873643499521cdf11b94d827f2646966a2a68d250dc3e25d44","dweb:/ipfs/QmYiJKdbiSGgJ5PeZPs8b3fAoSfDPWTREUYXqtDJN4x4RF"],"license":"MIT"},"vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol":{"keccak256":"0xa36a31b4bb17fad88d023474893b3b895fa421650543b1ce5aefc78efbd43244","urls":["bzz-raw://0f235b9175d95111f301d729566e214c32559e55a2b0579c947484748e20679d","dweb:/ipfs/QmSsNBuPejy1wNe2u3JSt2p9wFhrjvBjFrnAaNe1nDNkEA"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"ccip/applications/CCIPReceiver.sol","id":5814,"exportedSymbols":{"CCIPReceiver":[5813],"Client":[7788],"IAny2EVMMessageReceiver":[7255],"IERC165":[138090]},"nodeType":"SourceUnit","src":"32:2477:7","nodes":[{"id":5697,"nodeType":"PragmaDirective","src":"32:23:7","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":5699,"nodeType":"ImportDirective","src":"57:82:7","nodes":[],"absolutePath":"ccip/interfaces/IAny2EVMMessageReceiver.sol","file":"../interfaces/IAny2EVMMessageReceiver.sol","nameLocation":"-1:-1:-1","scope":5814,"sourceUnit":7256,"symbolAliases":[{"foreign":{"id":5698,"name":"IAny2EVMMessageReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7255,"src":"65:23:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":5701,"nodeType":"ImportDirective","src":"141:47:7","nodes":[],"absolutePath":"ccip/libraries/Client.sol","file":"../libraries/Client.sol","nameLocation":"-1:-1:-1","scope":5814,"sourceUnit":7789,"symbolAliases":[{"foreign":{"id":5700,"name":"Client","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7788,"src":"149:6:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":5703,"nodeType":"ImportDirective","src":"190:108:7","nodes":[],"absolutePath":"vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol","file":"../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol","nameLocation":"-1:-1:-1","scope":5814,"sourceUnit":138091,"symbolAliases":[{"foreign":{"id":5702,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138090,"src":"198:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":5813,"nodeType":"ContractDefinition","src":"389:2119:7","nodes":[{"id":5710,"nodeType":"VariableDeclaration","src":"460:39:7","nodes":[],"constant":false,"mutability":"immutable","name":"i_ccipRouter","nameLocation":"487:12:7","scope":5813,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5709,"name":"address","nodeType":"ElementaryTypeName","src":"460:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"id":5734,"nodeType":"FunctionDefinition","src":"504:124:7","nodes":[],"body":{"id":5733,"nodeType":"Block","src":"532:96:7","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5715,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5712,"src":"542:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"560:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5717,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"552:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5716,"name":"address","nodeType":"ElementaryTypeName","src":"552:7:7","typeDescriptions":{}}},"id":5719,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"552:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"542:20:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5728,"nodeType":"IfStatement","src":"538:58:7","trueBody":{"errorCall":{"arguments":[{"arguments":[{"hexValue":"30","id":5724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"593:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"585:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5722,"name":"address","nodeType":"ElementaryTypeName","src":"585:7:7","typeDescriptions":{}}},"id":5725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"585:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5721,"name":"InvalidRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5796,"src":"571:13:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":5726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"571:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5727,"nodeType":"RevertStatement","src":"564:32:7"}},{"expression":{"id":5731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5729,"name":"i_ccipRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"602:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5730,"name":"router","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5712,"src":"617:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"602:21:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5732,"nodeType":"ExpressionStatement","src":"602:21:7"}]},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":5713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5712,"mutability":"mutable","name":"router","nameLocation":"524:6:7","nodeType":"VariableDeclaration","scope":5734,"src":"516:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5711,"name":"address","nodeType":"ElementaryTypeName","src":"516:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"515:16:7"},"returnParameters":{"id":5714,"nodeType":"ParameterList","parameters":[],"src":"532:0:7"},"scope":5813,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":5758,"nodeType":"FunctionDefinition","src":"1405:209:7","nodes":[],"body":{"id":5757,"nodeType":"Block","src":"1496:118:7","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5743,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5737,"src":"1509:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":5745,"name":"IAny2EVMMessageReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7255,"src":"1529:23:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAny2EVMMessageReceiver_$7255_$","typeString":"type(contract IAny2EVMMessageReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAny2EVMMessageReceiver_$7255_$","typeString":"type(contract IAny2EVMMessageReceiver)"}],"id":5744,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1524:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1524:29:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAny2EVMMessageReceiver_$7255","typeString":"type(contract IAny2EVMMessageReceiver)"}},"id":5747,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1554:11:7","memberName":"interfaceId","nodeType":"MemberAccess","src":"1524:41:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1509:56:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":5754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5749,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5737,"src":"1569:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":5751,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138090,"src":"1589:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$138090_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$138090_$","typeString":"type(contract IERC165)"}],"id":5750,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1584:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":5752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1584:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$138090","typeString":"type(contract IERC165)"}},"id":5753,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1598:11:7","memberName":"interfaceId","nodeType":"MemberAccess","src":"1584:25:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1569:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1509:100:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":5742,"id":5756,"nodeType":"Return","src":"1502:107:7"}]},"baseFunctions":[138089],"documentation":{"id":5735,"nodeType":"StructuredDocumentation","src":"632:770:7","text":"@notice IERC165 supports an interfaceId\n @param interfaceId The interfaceId to check\n @return true if the interfaceId is supported\n @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\n e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\n This allows CCIP to check if ccipReceive is available before calling it.\n If this returns false or reverts, only tokens are transferred to the receiver.\n If this returns true, tokens are transferred and ccipReceive is called atomically.\n Additionally, if the receiver address does not have code associated with\n it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred."},"functionSelector":"01ffc9a7","implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1414:17:7","overrides":{"id":5739,"nodeType":"OverrideSpecifier","overrides":[],"src":"1472:8:7"},"parameters":{"id":5738,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5737,"mutability":"mutable","name":"interfaceId","nameLocation":"1439:11:7","nodeType":"VariableDeclaration","scope":5758,"src":"1432:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5736,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1432:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1431:20:7"},"returnParameters":{"id":5742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5758,"src":"1490:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":5740,"name":"bool","nodeType":"ElementaryTypeName","src":"1490:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1489:6:7"},"scope":5813,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":5773,"nodeType":"FunctionDefinition","src":"1660:130:7","nodes":[],"body":{"id":5772,"nodeType":"Block","src":"1758:32:7","nodes":[],"statements":[{"expression":{"arguments":[{"id":5769,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5762,"src":"1777:7:7","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$7729_calldata_ptr","typeString":"struct Client.Any2EVMMessage calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Any2EVMMessage_$7729_calldata_ptr","typeString":"struct Client.Any2EVMMessage calldata"}],"id":5768,"name":"_ccipReceive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5780,"src":"1764:12:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Any2EVMMessage_$7729_memory_ptr_$returns$__$","typeString":"function (struct Client.Any2EVMMessage memory)"}},"id":5770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1764:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5771,"nodeType":"ExpressionStatement","src":"1764:21:7"}]},"baseFunctions":[7254],"documentation":{"id":5759,"nodeType":"StructuredDocumentation","src":"1618:39:7","text":"@inheritdoc IAny2EVMMessageReceiver"},"functionSelector":"85572ffb","implemented":true,"kind":"function","modifiers":[{"id":5766,"kind":"modifierInvocation","modifierName":{"id":5765,"name":"onlyRouter","nameLocations":["1747:10:7"],"nodeType":"IdentifierPath","referencedDeclaration":5812,"src":"1747:10:7"},"nodeType":"ModifierInvocation","src":"1747:10:7"}],"name":"ccipReceive","nameLocation":"1669:11:7","overrides":{"id":5764,"nodeType":"OverrideSpecifier","overrides":[],"src":"1738:8:7"},"parameters":{"id":5763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5762,"mutability":"mutable","name":"message","nameLocation":"1712:7:7","nodeType":"VariableDeclaration","scope":5773,"src":"1681:38:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$7729_calldata_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":5761,"nodeType":"UserDefinedTypeName","pathNode":{"id":5760,"name":"Client.Any2EVMMessage","nameLocations":["1681:6:7","1688:14:7"],"nodeType":"IdentifierPath","referencedDeclaration":7729,"src":"1681:21:7"},"referencedDeclaration":7729,"src":"1681:21:7","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$7729_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"1680:40:7"},"returnParameters":{"id":5767,"nodeType":"ParameterList","parameters":[],"src":"1758:0:7"},"scope":5813,"stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"id":5780,"nodeType":"FunctionDefinition","src":"1891:77:7","nodes":[],"documentation":{"id":5774,"nodeType":"StructuredDocumentation","src":"1794:94:7","text":"@notice Override this function in your implementation.\n @param message Any2EVMMessage"},"implemented":false,"kind":"function","modifiers":[],"name":"_ccipReceive","nameLocation":"1900:12:7","parameters":{"id":5778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5777,"mutability":"mutable","name":"message","nameLocation":"1942:7:7","nodeType":"VariableDeclaration","scope":5780,"src":"1913:36:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$7729_memory_ptr","typeString":"struct Client.Any2EVMMessage"},"typeName":{"id":5776,"nodeType":"UserDefinedTypeName","pathNode":{"id":5775,"name":"Client.Any2EVMMessage","nameLocations":["1913:6:7","1920:14:7"],"nodeType":"IdentifierPath","referencedDeclaration":7729,"src":"1913:21:7"},"referencedDeclaration":7729,"src":"1913:21:7","typeDescriptions":{"typeIdentifier":"t_struct$_Any2EVMMessage_$7729_storage_ptr","typeString":"struct Client.Any2EVMMessage"}},"visibility":"internal"}],"src":"1912:38:7"},"returnParameters":{"id":5779,"nodeType":"ParameterList","parameters":[],"src":"1967:0:7"},"scope":5813,"stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":5792,"nodeType":"FunctionDefinition","src":"2205:98:7","nodes":[],"body":{"id":5791,"nodeType":"Block","src":"2264:39:7","nodes":[],"statements":[{"expression":{"arguments":[{"id":5788,"name":"i_ccipRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5710,"src":"2285:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5787,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2277:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5786,"name":"address","nodeType":"ElementaryTypeName","src":"2277:7:7","typeDescriptions":{}}},"id":5789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2277:21:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5785,"id":5790,"nodeType":"Return","src":"2270:28:7"}]},"documentation":{"id":5781,"nodeType":"StructuredDocumentation","src":"2131:71:7","text":"@notice Return the current router\n @return CCIP router address"},"functionSelector":"b0f479a1","implemented":true,"kind":"function","modifiers":[],"name":"getRouter","nameLocation":"2214:9:7","parameters":{"id":5782,"nodeType":"ParameterList","parameters":[],"src":"2223:2:7"},"returnParameters":{"id":5785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5784,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5792,"src":"2255:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5783,"name":"address","nodeType":"ElementaryTypeName","src":"2255:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2254:9:7"},"scope":5813,"stateMutability":"view","virtual":true,"visibility":"public"},{"id":5796,"nodeType":"ErrorDefinition","src":"2307:36:7","nodes":[],"errorSelector":"d7f73334","name":"InvalidRouter","nameLocation":"2313:13:7","parameters":{"id":5795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5794,"mutability":"mutable","name":"router","nameLocation":"2335:6:7","nodeType":"VariableDeclaration","scope":5796,"src":"2327:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5793,"name":"address","nodeType":"ElementaryTypeName","src":"2327:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2326:16:7"}},{"id":5812,"nodeType":"ModifierDefinition","src":"2403:103:7","nodes":[],"body":{"id":5811,"nodeType":"Block","src":"2425:81:7","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5799,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2435:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2439:6:7","memberName":"sender","nodeType":"MemberAccess","src":"2435:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5801,"name":"getRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5792,"src":"2449:9:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2449:11:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2435:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5809,"nodeType":"IfStatement","src":"2431:63:7","trueBody":{"errorCall":{"arguments":[{"expression":{"id":5805,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2483:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2487:6:7","memberName":"sender","nodeType":"MemberAccess","src":"2483:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5804,"name":"InvalidRouter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5796,"src":"2469:13:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":5807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2469:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5808,"nodeType":"RevertStatement","src":"2462:32:7"}},{"id":5810,"nodeType":"PlaceholderStatement","src":"2500:1:7"}]},"documentation":{"id":5797,"nodeType":"StructuredDocumentation","src":"2347:53:7","text":"@dev only calls from the set router are accepted."},"name":"onlyRouter","nameLocation":"2412:10:7","parameters":{"id":5798,"nodeType":"ParameterList","parameters":[],"src":"2422:2:7"},"virtual":false,"visibility":"internal"}],"abstract":true,"baseContracts":[{"baseName":{"id":5705,"name":"IAny2EVMMessageReceiver","nameLocations":["423:23:7"],"nodeType":"IdentifierPath","referencedDeclaration":7255,"src":"423:23:7"},"id":5706,"nodeType":"InheritanceSpecifier","src":"423:23:7"},{"baseName":{"id":5707,"name":"IERC165","nameLocations":["448:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":138090,"src":"448:7:7"},"id":5708,"nodeType":"InheritanceSpecifier","src":"448:7:7"}],"canonicalName":"CCIPReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":5704,"nodeType":"StructuredDocumentation","src":"300:89:7","text":"@title CCIPReceiver - Base contract for CCIP applications that can receive messages."},"fullyImplemented":false,"linearizedBaseContracts":[5813,138090,7255],"name":"CCIPReceiver","nameLocation":"407:12:7","scope":5814,"usedErrors":[5796],"usedEvents":[]}],"license":"MIT"},"id":7}