INFO:Detectors:
OmronDeposit.onlyAfterDepositStop() (contracts/OmronDeposit.sol#201-206) uses a dangerous strict equality:
	- depositStopTime == 0 (contracts/OmronDeposit.sol#202)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dangerous-strict-equalities
INFO:Detectors:
Reentrancy in OmronDeposit.withdrawTokens(address) (contracts/OmronDeposit.sol#322-365):
	External calls:
	- token.safeTransfer(claimManager,userBalance) (contracts/OmronDeposit.sol#356)
	State variables written after the call(s):
	- user.tokenBalances[allWhitelistedTokens[i]] = 0 (contracts/OmronDeposit.sol#353)
	OmronDeposit.userInfo (contracts/OmronDeposit.sol#31) can be used in cross function reentrancies:
	- OmronDeposit.calculatePoints(address) (contracts/OmronDeposit.sol#262-267)
	- OmronDeposit.getUserInfo(address) (contracts/OmronDeposit.sol#228-243)
	- OmronDeposit.tokenBalance(address,address) (contracts/OmronDeposit.sol#275-281)
	- OmronDeposit.userInfo (contracts/OmronDeposit.sol#31)
	- user.pointsPerHour = 0 (contracts/OmronDeposit.sol#362)
	OmronDeposit.userInfo (contracts/OmronDeposit.sol#31) can be used in cross function reentrancies:
	- OmronDeposit.calculatePoints(address) (contracts/OmronDeposit.sol#262-267)
	- OmronDeposit.getUserInfo(address) (contracts/OmronDeposit.sol#228-243)
	- OmronDeposit.tokenBalance(address,address) (contracts/OmronDeposit.sol#275-281)
	- OmronDeposit.userInfo (contracts/OmronDeposit.sol#31)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
OmronDeposit.stopDeposits() (contracts/OmronDeposit.sol#160-166) uses timestamp for comparisons
	Dangerous comparisons:
	- depositStopTime != 0 (contracts/OmronDeposit.sol#161)
OmronDeposit._calculatePointsDiff(IOmronDeposit.UserInfo) (contracts/OmronDeposit.sol#419-442) uses timestamp for comparisons
	Dangerous comparisons:
	- _user.lastUpdated == 0 || _user.pointsPerHour == 0 || (_user.lastUpdated >= depositStopTime && depositStopTime != 0) (contracts/OmronDeposit.sol#426-428)
	- depositStopTime != 0 (contracts/OmronDeposit.sol#436)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
Different versions of Solidity are used:
	- Version used: ['0.8.21', '^0.8.0', '^0.8.20', '^0.8.21']
	- 0.8.21 (contracts/OmronDeposit.sol#2)
	- 0.8.21 (contracts/interfaces/IERC20Min.sol#2)
	- 0.8.21 (contracts/interfaces/IOmronDeposit.sol#2)
	- ^0.8.0 (contracts/interfaces/IClaimManager.sol#3)
	- ^0.8.0 (contracts/mock/FuzzTest.sol#2)
	- ^0.8.0 (contracts/mock/MockClaim.sol#3)
	- ^0.8.0 (contracts/mock/ReentrancyAttack.sol#2)
	- ^0.8.0 (contracts/mock/tstETH.sol#2)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Address.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Pausable.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#4)
	- ^0.8.21 (contracts/mock/brokenERC20.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
OmronDeposit.removeWhitelistedToken(address) (contracts/OmronDeposit.sol#103-133) has costly operations inside a loop:
	- allWhitelistedTokens.pop() (contracts/OmronDeposit.sol#122)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#costly-operations-inside-a-loop
INFO:Detectors:
Pragma version0.8.21 (contracts/OmronDeposit.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
Pragma version0.8.21 (contracts/interfaces/IOmronDeposit.sol#2) necessitates a version too recent to be trusted. Consider deploying with 0.8.18.
solc-0.8.21 is not recommended for deployment
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Parameter OmronDeposit.addWhitelistedToken(address)._tokenAddress (contracts/OmronDeposit.sol#90) is not in mixedCase
Parameter OmronDeposit.removeWhitelistedToken(address)._tokenAddress (contracts/OmronDeposit.sol#103) is not in mixedCase
Parameter OmronDeposit.setClaimManager(address)._newClaimManager (contracts/OmronDeposit.sol#139) is not in mixedCase
Parameter OmronDeposit.getUserInfo(address)._userAddress (contracts/OmronDeposit.sol#229) is not in mixedCase
Parameter OmronDeposit.calculatePoints(address)._userAddress (contracts/OmronDeposit.sol#263) is not in mixedCase
Parameter OmronDeposit.tokenBalance(address,address)._userAddress (contracts/OmronDeposit.sol#276) is not in mixedCase
Parameter OmronDeposit.tokenBalance(address,address)._tokenAddress (contracts/OmronDeposit.sol#277) is not in mixedCase
Parameter OmronDeposit.deposit(address,uint256)._tokenAddress (contracts/OmronDeposit.sol#291) is not in mixedCase
Parameter OmronDeposit.deposit(address,uint256)._amount (contracts/OmronDeposit.sol#292) is not in mixedCase
Parameter OmronDeposit.withdrawTokens(address)._userAddress (contracts/OmronDeposit.sol#323) is not in mixedCase
Parameter OmronDeposit.claim(address)._userAddress (contracts/OmronDeposit.sol#373) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Slither:. analyzed (23 contracts with 94 detectors), 20 result(s) found
