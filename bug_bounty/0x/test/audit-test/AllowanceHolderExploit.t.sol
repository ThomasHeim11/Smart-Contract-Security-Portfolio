// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "forge-std/console.sol";
import {IERC20} from "forge-std/interfaces/IERC20.sol";
import "../../src/allowanceholder/AllowanceHolderBase.sol";

// Dummy ERC20 token for testing
contract TestToken is IERC20 {
    string public constant name = "Test Token";
    string public constant symbol = "TTK";
    uint8 public constant decimals = 18;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;

    constructor() {
        _mint(msg.sender, 1000 * 10 ** 18);
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(msg.sender, recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(msg.sender, spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        uint256 currentAllowance = _allowances[sender][msg.sender];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _transfer(sender, recipient, amount);
        _approve(sender, msg.sender, currentAllowance - amount);
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }
}

// Custom token for exploit testing, bypassing allowance check
contract ExploitTestToken is TestToken {
    // Override to bypass allowance check for malicious testing
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        // Deliberately skip the allowance check to simulate the exploit scenario
        return true;
    }
}

// Concrete implementation of the abstract contract with a vulnerability
contract TestAllowanceHolder is AllowanceHolderBase {
    // Provide additional methods for testing purposes
    function executeTransferFrom(address token, address owner, address recipient, uint256 amount) external {
        // Here we intentionally bypass the allowance check to simulate a vulnerability.
        // This would be the source of the exploit.
        IERC20(token).transferFrom(owner, recipient, amount);
    }

    function _get(TSlot s) internal view virtual override returns (uint256) {}

    function _set(TSlot s, uint256 v) internal virtual override {}

    function exec(address operator, address token, uint256 amount, address payable target, bytes calldata data)
        internal
        virtual
        override
        returns (bytes memory result)
    {}
}

contract AllowanceHolderExploit is Test {
    ExploitTestToken token; // Change to ExploitTestToken
    TestAllowanceHolder allowanceHolder;
    address attacker = address(0x123);
    address victim = address(0x456);

    function setUp() public {
        token = new ExploitTestToken(); // Instantiates the custom ExploitTestToken
        allowanceHolder = new TestAllowanceHolder();

        // Distribute tokens to victim and attacker
        token.transfer(victim, 500 * 10 ** 18);
        token.transfer(attacker, 100 * 10 ** 18);

        // Attacker sets approval to AllowanceHolder contract
        vm.prank(attacker);
        token.approve(address(allowanceHolder), type(uint256).max);

        // No need for the victim to approve in this scenario

        // Logging initial token balances
        console.log("Initial Attacker balance:", token.balanceOf(attacker));
        console.log("Initial Victim balance:", token.balanceOf(victim));
    }

    function testExploit() public {
        vm.startPrank(attacker);

        uint256 initialAttackerBalance = token.balanceOf(attacker);
        uint256 initialVictimBalance = token.balanceOf(victim);

        // The attacker exploits a vulnerability (improper allowance check) in the AllowanceHolder contract
        allowanceHolder.executeTransferFrom(address(token), victim, attacker, 100 * 10 ** 18);

        uint256 finalAttackerBalance = token.balanceOf(attacker);
        uint256 finalVictimBalance = token.balanceOf(victim);

        // Log final token balances
        console.log("Final Attacker balance:", finalAttackerBalance);
        console.log("Final Victim balance:", finalVictimBalance);

        // Check if the victim's balance decreased and the attacker's balance increased
        assertEq(initialVictimBalance - finalVictimBalance, 100 * 10 ** 18);
        assertEq(finalAttackerBalance - initialAttackerBalance, 100 * 10 ** 18);

        vm.stopPrank();
    }
}
